#!/bin/bash

set -eo pipefail

dir="$1"
image="$2"

if ! shift; then
    echo "usage: $0 dir image[:tag][@digest] ..."
    echo "       $0 /tmp/old-hello-world hello-world:latest@sha256:8be990ef2aeb16dbcb9271ddfe2610fa6658d13f6dfb8bc72074cc1ca36966a7"
    exit 1
fi

if [ -d "${dir}" ]; then
    echo "The directory '$dir' already exists."
    echo "Aborting..."
    exit 1
fi

# Download the image download script from Moby if it is not there, verify and
# patch out the unnecessary go dependence
if [ ! -f "${HOME}/.cache/download-frozen-image-v2.sh" ]; then
    echo "Fetching download-frozen-image-v2.sh..."
    curl --silent --output "${HOME}/.cache/download-frozen-image-v2.sh" \
        https://raw.githubusercontent.com/moby/moby/master/contrib/download-frozen-image-v2.sh
    echo "1161e28cf886211f7f442bf2628fd053a21e6c0fa234532466ba55de41b5703b  ${HOME}/.cache/download-frozen-image-v2.sh" | sha256sum --check --quiet -
    cat > "${HOME}/.cache/download-frozen-image-v2.sh.patch" << 'EOF'
--- download-frozen-image-v2.sh	2019-10-30 13:55:36.956848312 +1300
+++ download-frozen-image-v2.sh	2020-01-28 14:01:36.548303270 +1300
@@ -8,7 +8,7 @@
 # debian                           latest              f6fab3b798be3174f45aa1eb731f8182705555f89c9026d8c1ef230cbf8301dd   10 weeks ago        85.1 MB
 
 # check if essential commands are in our PATH
-for cmd in curl jq go; do
+for cmd in curl jq; do
 	if ! command -v $cmd &> /dev/null; then
 		echo >&2 "error: \"$cmd\" not found!"
 		exit 1
@@ -36,7 +36,7 @@
 
 # bash v4 on Windows CI requires CRLF separator
 newlineIFS=$'\n'
-if [ "$(go env GOHOSTOS)" = 'windows' ]; then
+if [ "" = 'windows' ]; then
 	major=$(echo ${BASH_VERSION%%[^0.9]} | cut -d. -f1)
 	if [ "$major" -ge 4 ]; then
 		newlineIFS=$'\r\n'
@@ -155,7 +155,7 @@
 					continue
 				fi
 				local token="$(curl -fsSL "$authBase/token?service=$authService&scope=repository:$image:pull" | jq --raw-output '.token')"
-				fetch_blob "$token" "$image" "$layerDigest" "$dir/$layerTar" --progress
+				fetch_blob "$token" "$image" "$layerDigest" "$dir/$layerTar" --progress-bar
 				;;
 
 			*)
@@ -235,7 +235,7 @@
 					for i in "${!layers[@]}"; do
 						layerMeta="${layers[$i]}"
 						maniArch="$(echo "$layerMeta" | jq --raw-output '.platform.architecture')"
-						if [ "$maniArch" = "$(go env GOARCH)" ]; then
+						if [ "$maniArch" = "amd64" ]; then
 							digest="$(echo "$layerMeta" | jq --raw-output '.digest')"
 							# get second level single manifest
 							submanifestJson="$(
@@ -299,7 +299,7 @@
 					continue
 				fi
 				token="$(curl -fsSL "$authBase/token?service=$authService&scope=repository:$image:pull" | jq --raw-output '.token')"
-				fetch_blob "$token" "$image" "$imageLayer" "$dir/$layerId/layer.tar" --progress
+				fetch_blob "$token" "$image" "$imageLayer" "$dir/$layerId/layer.tar" --progress-bar
 			done
 			;;
 
EOF
    patch --silent --directory="${HOME}/.cache" < "${HOME}/.cache/download-frozen-image-v2.sh.patch"
    rm "${HOME}/.cache/download-frozen-image-v2.sh.patch"
fi

trap "echo \"Removing '${dir}'\"; rm -rf \"${dir}\"" err

# Download Docker image
bash "${HOME}/.cache/download-frozen-image-v2.sh" "${dir}" "${image}"

# Unpack the layers in order and delete the downloaded files
cd "$dir"

for layer in $(jq --raw-output '.[0].Layers[]' manifest.json); do
    echo "Extracting layer ${layer}"
    tar -x -f "${layer}"
    rm -r "$(dirname "${layer}")"
done
config="$(jq --raw-output '.[0].Config' manifest.json)"
rm "${config}"
rm "manifest.json"
rm "repositories"

# Done
echo
echo "Unpacking of Docker image into '$dir' complete."
echo "Remember that these containers are not bootable!"
echo "To start a systemd container use something like:"
echo "  sudo systemd-nspawn -D '$dir'"

