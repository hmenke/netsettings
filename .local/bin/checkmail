#!/usr/bin/env python

from configparser import ConfigParser
from email.header import make_header, decode_header
from email.parser import BytesHeaderParser
from email.utils import format_datetime, parsedate_to_datetime
from html import escape
from imaplib import IMAP4_SSL
from netrc import netrc
from os import getenv, listdir, makedirs, remove
from os.path import expanduser, join, exists
from subprocess import call
from sys import argv

netrc_path = expanduser("~/.netrc")
offlineimap_path = expanduser(
    getenv("XDG_CONFIG_HOME", "~/.config") + "/offlineimap/config"
)
imapcache_dir = expanduser(getenv("XDG_CACHE_HOME", "~/.cache") + "/checkmail")
config_path = expanduser(
    getenv("XDG_CONFIG_HOME", "~/.config") + "/checkmail/config.ini"
)


def process_messages(msgs):
    # Spawn a notification for each message
    for msg in msgs:
        # Decode message headers
        subject = str(make_header(decode_header(msg["subject"] or "<no subject>")))
        date = format_datetime(parsedate_to_datetime(msg["date"]).astimezone())
        sender = str(make_header(decode_header(msg["from"])))

        # Spawn notification
        call(["notify-send", subject, escape(date + "\n" + sender)])


def get_messages_imap(imap_server, mailboxes):
    # Get credentials
    credentials = netrc(netrc_path)
    imap_user, _, imap_password = credentials.authenticators(imap_server)

    # Open connection
    conn = IMAP4_SSL(imap_server)
    conn.login(imap_user, imap_password)

    # Get unread in inbox
    message_list = []
    for mailbox in mailboxes:
        typ, count = conn.select(mailbox=mailbox, readonly=True)
        if typ != "OK":
            return []
        typ, messages = conn.search(None, "(UNSEEN)")
        if typ != "OK":
            return []

        # Prune empty elements and print count
        message_list.extend([msg for msg in messages[0].split(b" ") if msg != b""])

        # Make directory for caching and remove read messages from cache
        folder = join(imapcache_dir, imap_server)
        makedirs(folder, exist_ok=True)
        for filename in listdir(folder):
            if not filename.encode("utf-8") in message_list:
                remove(join(folder, filename))

        # Collect messages
        msgs = []
        parser = BytesHeaderParser()
        for num in message_list:
            # Retrieve message
            filename = expanduser(join(folder, num.decode("utf-8")))
            if exists(filename):
                with open(filename, "rb") as fp:
                    msgs.append(parser.parse(fp))
            else:
                typ, data = conn.fetch(num, "(BODY.PEEK[HEADER])")
                with open(filename, "wb") as fp:
                    fp.write(data[0][1])
                msgs.append(parser.parsebytes(data[0][1]))

    # Bye :-)
    conn.close()
    return msgs


def get_messages_offline():
    # Read the offlineimap config
    cfg = ConfigParser()
    cfg.read(offlineimap_path)

    # Check inboxes of all accounts
    msgs = []
    parser = BytesHeaderParser()
    for account in cfg["general"]["accounts"].split(" "):
        localrepo = cfg["Account " + account]["localrepository"]
        localfolders = cfg["Repository " + localrepo]["localfolders"]

        maildir_path = join(expanduser(localfolders), "INBOX", "new")
        for filename in listdir(maildir_path):
            with open(join(maildir_path, filename), "rb") as fp:
                msgs.append(parser.parse(fp))
    return msgs


if __name__ == "__main__":
    assert exists(config_path), "checkmail: Configuration file {} is missing!".format(
        config_path
    )

    cfg = ConfigParser(allow_no_value=True)
    cfg.optionxform = str
    cfg.read(config_path)

    msgs = []
    for account in cfg.sections():
        settings = cfg[account]
        location = settings["location"]
        mailboxes = settings["mailboxes"].split(" ")
        if location == "offline":
            msgs = get_messages_offline()
        else:
            msgs = get_messages_imap(location, mailboxes)

    print(len(msgs))
    process_messages(msgs)
